rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to get user's plan
    function getUserPlan() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan;
    }

    // Helper function to check file size limits
    function isWithinSizeLimit() {
      let plan = getUserPlan();
      let size = request.resource.data.size;
      
      return 
        plan == 'admin' || // No limit for admins
        (plan == 'standard' && size <= 20 * 1024 * 1024) || // 20MB for standard
        (plan == 'premium' && size <= 50 * 1024 * 1024); // 50MB for premium
    }

    // Helper function to check daily upload limits
    function isWithinDailyLimit() {
      let plan = getUserPlan();
      if (plan == 'admin') return true; // No limit for admins
      if (plan == 'free') return false; // No uploads for free users
      
      let userId = request.auth.uid;
      let startOfDay = timestamp.date(2024, request.time.toDate().month(), request.time.toDate().day());
      let uploads = getAfter(/databases/$(database)/documents/users/$(userId)).data.dailyUploads;
      
      return 
        (plan == 'standard' && (uploads == null || uploads < 5)) || // 5 per day for standard
        (plan == 'premium' && (uploads == null || uploads < 50)); // 50 per day for premium
    }

    // Images collection rules
    match /images/{imageId} {
      allow read: if true;  // Anyone can read images
      allow create: if isAuthenticated() && 
                   isWithinSizeLimit() && 
                   isWithinDailyLimit() &&
                   request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Stats document for upload counter
    match /stats/uploads {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
      allow update: if isOwner(userId) && 
                   (!request.resource.data.diff(resource.data).affectedKeys()
                    .hasAny(['role', 'plan', 'dailyUploads']));
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 